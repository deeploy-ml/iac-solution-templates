{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
      "location": {
          "type": "string",
          "defaultValue": "westeurope",
          "metadata": {
              "description": "Location of the resource"
          }
      },
      "coreResourceGroupName": {
          "type": "string",
          "defaultValue": "deeployCoreResourceGroup",
          "metadata": {
            "description": "Name of your cluster - Between 3 and 23 characters. Letters and numbers only"
          }
      },
      "storageResourceGroupName": {
          "type": "string",
          "defaultValue": "deeployStorageResourceGroup",
          "metadata": {
            "description": "Name of your storage Resource Group - Between 3 and 23 characters. Letters and numbers only"
          }
      },
      "saName": {
          "defaultValue": "deeploy-sa",
          "type": "String",
          "metadata": {
              "description": "Name for Azure Storage Account"
            }
      },
      "dbName": {
          "defaultValue": "deeploy-db",
          "type": "String",
          "metadata": {
              "description": "Server Name for Azure database for PostgreSQL"
            }
      },
      "administratorLogin": {
          "type": "string",
          "defaultValue": "deeploy",
          "minLength": 1,
          "metadata": {
            "description": "Database administrator login name"
          }
        },
      "administratorLoginPassword": {
          "type": "securestring",
          "minLength": 8,
          "metadata": {
            "description": "Database administrator password (min 8 chars)"
          }
        },
      "dbTypeName": {
          "defaultValue": "dB_Gen5_2",
          "type": "String",
          "metadata": {
              "description": "Azure database for PostgreSQL sku name"
            }
      },
      "dbTier": {
          "defaultValue": "Basic",
          "type": "String",
          "metadata": {
              "description": "Azure database for PostgreSQL sku name"
            }
      },
      "dbCapacity": {
          "type": "int",
          "defaultValue": 2,
          "metadata": {
            "description": "Azure database for PostgreSQL compute capacity in vCores (2,4,8,16,32)"
          }
      },
      "dbSizeMB": {
          "type": "int",
          "defaultValue": 51200,
          "metadata": {
            "description": "Azure database for PostgreSQL Sku Size "
          }
      },
      "dbFamily": {
          "type": "string",
          "defaultValue": "Gen5",
          "metadata": {
            "description": "Azure database for PostgreSQL sku family"
          }
      },
      "clusterName": {
          "type": "string",
          "defaultValue": "[concat('sf-', uniqueString(resourceGroup().id))]",
          "metadata": {
            "description": "Name of your cluster - Between 3 and 23 characters. Letters and numbers only"
          }
      },
      "kubernetesVersion": {
          "defaultValue": "1.18.0",
          "type": "string",
          "metadata": {
              "description": "The version of Kubernetes."
          }
      },
      "loadBalancedAppPort": {
          "type": "int",
          "defaultValue": 443,
          "metadata": {
            "description": "Input endpoint1 for the application to use. Replace it with what your application uses"
          }
      },
      "adminUserName": {
          "type": "string",
          "metadata": {
            "description": "Remote desktop user Id"
          }
      },
      "adminPassword": {
          "type": "securestring",
          "metadata": {
            "description": "Remote desktop user password. Must be a strong password"
          }
      },
      "nt0InstanceCount": {
          "type": "int",
          "defaultValue": 3,
          "metadata": {
            "description": "Instance count for node type"
          }
      },
      "vmNodeType0Size": {
          "type": "string",
          "defaultValue": "Standard_D2_v2",
          "metadata": {
            "description": "VM Type"
          }
      },
      "certificateStoreValue": {
          "type": "string",
          "allowedValues": [
            "My"
          ],
          "defaultValue": "My",
          "metadata": {
            "description": "The store name where the cert will be deployed in the virtual machine"
          }
      },
      "certificateThumbprint": {
          "type": "string",
          "metadata": {
            "description": "Certificate Thumbprint"
          }
      },
      "sourceVaultValue": {
          "type": "string",
          "metadata": {
            "description": "Resource Id of the key vault, is should be in the format of /subscriptions/<Sub ID>/resourceGroups/<Resource group name>/providers/Microsoft.KeyVault/vaults/<vault name>"
          }
      }
  },
  "variables": {
      "computeLocation": "[parameters('location')]",
      "storageAccountType": "Standard_LRS",
      "storageAccountTier": "Stadard",
      "postgresqlVersion": "11",
      "backupRetentionDays": 7,
      "geoRedundantBackup": "Disabled",
      "firewallrules": {
          "batch": {
              "rules": [
              {
                  "Name": "deeployNodes",
                  "StartIpAddress": "0.0.0.0",
                  "EndIpAddress": "255.255.255.255"
              },
              {
                  "Name": "VPN",
                  "StartIpAddress": "0.0.0.0",
                  "EndIpAddress": "255.255.255.255"
              }
              ]
          }
      },
      "dnsName": "[parameters('clusterName')]",
      "vmImagePublisher": "Canonical",
      "vmImageOffer": "UbuntuServer",
      "vmImageSku": "16.04-LTS",
      "vmImageVersion": "latest",
      "clusterProtectionLevel": "EncryptAndSign",
      "vmName": "vm",
      "virtualNetworkName": "VNet",
      "addressPrefix": "10.0.0.0/16",
      "nicName": "NIC",
      "lbIPName": "PublicIP-LB-FE",
      "overProvision": "false",
      "nt0applicationStartPort": "20000",
      "nt0applicationEndPort": "30000",
      "nt0ephemeralStartPort": "49152",
      "nt0ephemeralEndPort": "65534",
      "nt0fabricTcpGatewayPort": "19000",
      "nt0fabricHttpGatewayPort": "19080",
      "subnet0Name": "Subnet-0",
      "subnet0Prefix": "10.0.0.0/24",
      "subnet0Ref": "[resourceId('Microsoft.Network/virtualNetworks/subnets/', variables('virtualNetworkName'), variables('subnet0Name'))]",
      "supportLogStorageAccountName": "[toLower( concat( uniqueString(resourceGroup().id),'2'))]",
      "applicationDiagnosticsStorageAccountName": "[toLower(concat('wad',uniqueString(resourceGroup().id), '3' ))]",
      "wadlogs": "<WadCfg><DiagnosticMonitorConfiguration>",
      "wadperfcounters1": "<PerformanceCounters scheduledTransferPeriod=\"PT1M\"><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\AvailableMemory\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory available\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentAvailableMemory\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Mem. percent available\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\UsedMemory\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory used\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentUsedMemory\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Memory percentage\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentUsedByCache\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Mem. used by cache\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentIdleTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU idle time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentUserTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU user time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentProcessorTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU percentage guest OS\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentIOWaitTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU IO wait time\" locale=\"en-us\"/></PerformanceCounterConfiguration>",
      "wadperfcounters2": "<PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\BytesPerSecond\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk total bytes\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\ReadBytesPerSecond\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk read guest OS\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\WriteBytesPerSecond\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk write guest OS\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\TransfersPerSecond\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk transfers\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\ReadsPerSecond\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk reads\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\WritesPerSecond\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk writes\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageReadTime\" sampleRate=\"PT15S\" unit=\"Seconds\"><annotation displayName=\"Disk read time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageWriteTime\" sampleRate=\"PT15S\" unit=\"Seconds\"><annotation displayName=\"Disk write time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageTransferTime\" sampleRate=\"PT15S\" unit=\"Seconds\"><annotation displayName=\"Disk transfer time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageDiskQueueLength\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Disk queue length\" locale=\"en-us\"/></PerformanceCounterConfiguration></PerformanceCounters>",
      "wadcfgxstart": "[concat(variables('wadlogs'),variables('wadperfcounters1'),variables('wadperfcounters2'),'<Metrics resourceId=\"')]",
      "wadcfgxend": "[concat('\"><MetricAggregation scheduledTransferPeriod=\"PT1H\"/><MetricAggregation scheduledTransferPeriod=\"PT1M\"/></Metrics></DiagnosticMonitorConfiguration></WadCfg>')]",
      "vmNodeType0Name": "[toLower(concat('NT1', variables('vmName')))]",
      "wadmetricsresourceid0": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name ,'/providers/','Microsoft.Compute/virtualMachineScaleSets/', variables('vmNodeType0Name'))]"      
  },
  "resources": [
      {
          "type": "Microsoft.Resources/resourceGroups",
          "apiVersion": "2020-10-01",
          "name": "[parameters('coreResourceGroupName')]",
          "location": "[parameters('location')]",
          "properties": {}
      },
      {
          "type": "Microsoft.Resources/resourceGroups",
          "apiVersion": "2020-10-01",
          "name": "[parameters('storageResourceGroupName')]",
          "location": "[parameters('location')]",
          "properties": {}
        },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "storageDeployment",
        "resourceGroup": "[parameters('storageResourceGroupName')]",
        "dependsOn": [
          "[resourceId('Microsoft.Resources/resourceGroups/', parameters('storageResourceGroupName'))]"
        ],
        "properties": {
          "mode": "Incremental",
          "template": {
            "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
            "contentVersion": "1.0.0.0",
            "parameters": {},
            "variables": {},
            "resources": [
              {
                  "type": "Microsoft.Storage/storageAccounts",
                  "apiVersion": "2021-04-01",
                  "name": "[parameters('deeploy-sa')]",
                  "location": "[parameters('location')]",
                  "sku": {
                      "name": "[variables('storageAccountType')]",
                      "tier": "[variables('storageAccountTier')]"
                  },
                  "kind": "StorageV2",
                  "properties": {
                      "minimumTlsVersion": "TLS1_2",
                      "allowBlobPublicAccess": true,
                      "allowSharedKeyAccess": true,
                      "networkAcls": {
                          "bypass": "AzureServices",
                          "virtualNetworkRules": [],
                          "ipRules": [],
                          "defaultAction": "Allow"
                      },
                      "supportsHttpsTrafficOnly": true,
                      "encryption": {
                          "services": {
                              "file": {
                                  "keyType": "Account",
                                  "enabled": true
                              },
                              "blob": {
                                  "keyType": "Account",
                                  "enabled": true
                              }
                          },
                          "keySource": "Microsoft.Storage"
                      },
                      "accessTier": "Hot"
                  }
              },
              {
                  "type": "Microsoft.DBforPostgreSQL/servers",
                  "apiVersion": "2017-12-01",
                  "name": "[parameters('dbName')]",
                  "location": "[parameters('location')]",
                  "sku": {
                    "name": "[parameters('dbTypeName')]",
                    "tier": "[parameters('dbTier')]",
                    "capacity": "[parameters('dbCapacity')]",
                    "size": "[parameters('dbSizeMB')]",
                    "family": "[parameters('dbFamily')]"
                  },
                  "properties": {
                    "createMode": "Default",
                    "version": "[variables('postgresqlVersion')]",
                    "administratorLogin": "[parameters('administratorLogin')]",
                    "administratorLoginPassword": "[parameters('administratorLoginPassword')]",
                    "storageProfile": {
                      "storageMB": "[parameters('dbSizeMB')]",
                      "backupRetentionDays": "[variables('backupRetentionDays')]",
                      "geoRedundantBackup": "[variables('geoRedundantBackup')]"
                    }
                  }
              },
              {
                  "type": "Microsoft.DBforPostgreSQL/servers/firewallRules",
                  "apiVersion": "2017-12-01",
                  "name": "[concat(parameters('dbName'),'/',variables('firewallrules').batch.rules[copyIndex()].Name)]",
                  "location": "[parameters('location')]",
                  "copy": {
                    "name": "firewallRulesCopy",
                    "mode": "Serial",
                    "batchSize": 1,
                    "count": "[length(variables('firewallrules').batch.rules)]"
                  },
                  "dependsOn": [
                    "[resourceId('Microsoft.DBforPostgreSQL/servers/', parameters('dbName'))]"
                  ],
                  "properties": {
                    "startIpAddress": "[variables('firewallrules').batch.rules[copyIndex()].StartIpAddress]",
                    "endIpAddress": "[variables('firewallrules').batch.rules[copyIndex()].EndIpAddress]"
                  }
              }
          ],
          "outputs": {}
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "storageDeployment",
        "resourceGroup": "[parameters('coreResourceGroupName')]",
        "dependsOn": [
          "[resourceId('Microsoft.Resources/resourceGroups/', parameters('coreResourceGroupName'))]"
        ],
        "properties": {
          "mode": "Incremental",
          "template": {
            "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
            "contentVersion": "1.0.0.0",
            "parameters": {},
            "variables": {},
            "resources": [
              {
                  "apiVersion": "2021-02-01",
                  "type": "Microsoft.Storage/storageAccounts",
                  "name": "[variables('supportLogStorageAccountName')]",
                  "location": "[variables('computeLocation')]",
                  "properties": {},
                  "kind": "Storage",
                  "sku": {
                    "name": "[variables('storageAccountType')]"
                  },
                  "tags": {
                    "resourceType": "Service Fabric",
                    "clusterName": "[parameters('clusterName')]"
                  }
                },
                {
                  "apiVersion": "2021-02-01",
                  "type": "Microsoft.Storage/storageAccounts",
                  "name": "[variables('applicationDiagnosticsStorageAccountName')]",
                  "location": "[variables('computeLocation')]",
                  "properties": {},
                  "kind": "Storage",
                  "sku": {
                    "name": "[variables('storageAccountType')]"
                  },
                  "tags": {
                    "resourceType": "Service Fabric",
                    "clusterName": "[parameters('clusterName')]"
                  }
                },
                {
                  "apiVersion": "2020-07-01",
                  "type": "Microsoft.Network/virtualNetworks",
                  "name": "[variables('virtualNetworkName')]",
                  "location": "[variables('computeLocation')]",
                  "properties": {
                    "addressSpace": {
                      "addressPrefixes": [
                        "[variables('addressPrefix')]"
                      ]
                    },
                    "subnets": [
                      {
                        "name": "[variables('subnet0Name')]",
                        "properties": {
                          "addressPrefix": "[variables('subnet0Prefix')]"
                        }
                      }
                    ]
                  },
                  "tags": {
                    "resourceType": "Service Fabric",
                    "clusterName": "[parameters('clusterName')]"
                  }
                },
                {
                  "apiVersion": "2020-07-01",
                  "type": "Microsoft.Network/publicIPAddresses",
                  "name": "[concat(variables('lbIPName'),'-',variables('vmNodeType0Name'))]",
                  "location": "[variables('computeLocation')]",
                  "properties": {
                    "dnsSettings": {
                      "domainNameLabel": "[variables('dnsName')]"
                    },
                    "publicIPAllocationMethod": "Dynamic"
                  },
                  "tags": {
                    "resourceType": "Service Fabric",
                    "clusterName": "[parameters('clusterName')]"
                  }
                },
      
                {
                  "apiVersion": "2020-07-01",
                  "type": "Microsoft.Network/loadBalancers",
                  "name": "[concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name'))]",
                  "location": "[variables('computeLocation')]",
                  "dependsOn": [
                    "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('lbIPName'),'-',variables('vmNodeType0Name')))]"
                  ],
                  "properties": {
                    "frontendIPConfigurations": [
                      {
                        "name": "LoadBalancerIPConfig",
                        "properties": {
                          "publicIPAddress": {
                            "id": "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('lbIPName'),'-',variables('vmNodeType0Name')))]"
                          }
                        }
                      }
                    ],
                    "backendAddressPools": [
                      {
                        "name": "LoadBalancerBEAddressPool",
                        "properties": {}
                      }
                    ],
                    "loadBalancingRules": [
                      {
                        "name": "LBRule",
                        "properties": {
                          "backendAddressPool": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name')),'LoadBalancerBEAddressPool')]"
                          },
                          "backendPort": "[variables('nt0fabricTcpGatewayPort')]",
                          "enableFloatingIP": "false",
                          "frontendIPConfiguration": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name')),'LoadBalancerIPConfig')]"
                          },
                          "frontendPort": "[variables('nt0fabricTcpGatewayPort')]",
                          "idleTimeoutInMinutes": "5",
                          "probe": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/probes',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name')),'FabricGatewayProbe')]"
                          },
                          "protocol": "Tcp"
                        }
                      },
                      {
                        "name": "LBHttpRule",
                        "properties": {
                          "backendAddressPool": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name')),'LoadBalancerBEAddressPool')]"
                          },
                          "backendPort": "[variables('nt0fabricHttpGatewayPort')]",
                          "enableFloatingIP": "false",
                          "frontendIPConfiguration": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name')),'LoadBalancerIPConfig')]"
                          },
                          "frontendPort": "[variables('nt0fabricHttpGatewayPort')]",
                          "idleTimeoutInMinutes": "5",
                          "probe": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/probes',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name')),'FabricHttpGatewayProbe')]"
                          },
                          "protocol": "Tcp"
                        }
                      },
                      {
                        "name": "AppPortLBRule",
                        "properties": {
                          "backendAddressPool": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name')),'LoadBalancerBEAddressPool')]"
                          },
                          "backendPort": "[parameters('loadBalancedAppPort')]",
                          "enableFloatingIP": "false",
                          "frontendIPConfiguration": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name')),'LoadBalancerIPConfig')]"
                          },
                          "frontendPort": "[parameters('loadBalancedAppPort')]",
                          "idleTimeoutInMinutes": "5",
                          "probe": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/probes',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name')),'AppPortProbe')]"
                          },
                          "protocol": "Tcp"
                        }
                      }
                    ],
                    "probes": [
                      {
                        "name": "FabricGatewayProbe",
                        "properties": {
                          "intervalInSeconds": 5,
                          "numberOfProbes": 2,
                          "port": "[variables('nt0fabricTcpGatewayPort')]",
                          "protocol": "Tcp"
                        }
                      },
                      {
                        "name": "FabricHttpGatewayProbe",
                        "properties": {
                          "intervalInSeconds": 5,
                          "numberOfProbes": 2,
                          "port": "[variables('nt0fabricHttpGatewayPort')]",
                          "protocol": "Tcp"
                        }
                      },
                      {
                        "name": "AppPortProbe",
                        "properties": {
                          "intervalInSeconds": 5,
                          "numberOfProbes": 2,
                          "port": "[parameters('loadBalancedAppPort')]",
                          "protocol": "Tcp"
                        }
                      }
                    ],
                    "inboundNatPools": [
                      {
                        "name": "LoadBalancerBEAddressNatPool",
                        "properties": {
                          "backendPort": "22",
                          "frontendIPConfiguration": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name')),'LoadBalancerIPConfig')]"
                          },
                          "frontendPortRangeEnd": "4500",
                          "frontendPortRangeStart": "3389",
                          "protocol": "Tcp"
                        }
                      }
                    ]
                  },
                  "tags": {
                    "resourceType": "Service Fabric",
                    "clusterName": "[parameters('clusterName')]"
                  }
                },
                {
                  "apiVersion": "2020-12-01",
                  "type": "Microsoft.Compute/virtualMachineScaleSets",
                  "name": "[variables('vmNodeType0Name')]",
                  "location": "[variables('computeLocation')]",
                  "dependsOn": [
                    "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
                    "[resourceId('Microsoft.Network/loadBalancers', concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name')))]",
                    "[resourceId('Microsoft.Storage/storageAccounts', variables('supportLogStorageAccountName'))]",
                    "[resourceId('Microsoft.Storage/storageAccounts', variables('applicationDiagnosticsStorageAccountName'))]"
                  ],
                  "properties": {
                    "overprovision": "[variables('overProvision')]",
                    "upgradePolicy": {
                      "mode": "Automatic"
                    },
                    "virtualMachineProfile": {
                      "extensionProfile": {
                        "extensions": [
                          {
                            "name": "[concat('ServiceFabricNodeVmExt','_vmNodeType0Name')]",
                            "properties": {
                              "type": "ServiceFabricLinuxNode",
                              "autoUpgradeMinorVersion": true,
                              "protectedSettings": {
                                "StorageAccountKey1": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('supportLogStorageAccountName')),'2020-08-01-preview').keys[0]]",
                                "StorageAccountKey2": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('supportLogStorageAccountName')),'2020-08-01-preview').keys[1]]"
                              },
                              "publisher": "Microsoft.Azure.ServiceFabric",
                              "settings": {
                                "clusterEndpoint": "[reference(parameters('clusterName')).clusterEndpoint]",
                                "nodeTypeRef": "[variables('vmNodeType0Name')]",
                                "durabilityLevel": "Bronze",
                                "enableParallelJobs": true,
                                "nicPrefixOverride": "[variables('subnet0Prefix')]",
                                "certificate": {
                                  "thumbprint": "[parameters('certificateThumbprint')]",
                                  "x509StoreName": "[parameters('certificateStoreValue')]"
                                }
                              },
                              "typeHandlerVersion": "1.0"
                            }
                          },
                          {
                            "name": "[concat('VMDiagnosticsVmExt','_vmNodeType0Name')]",
                            "properties": {
                              "type": "LinuxDiagnostic",
                              "autoUpgradeMinorVersion": true,
                              "protectedSettings": {
                                "storageAccountName": "[variables('applicationDiagnosticsStorageAccountName')]",
                                "storageAccountKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('applicationDiagnosticsStorageAccountName')),'2020-08-01-preview').keys[0]]",
                                "storageAccountEndPoint": "[parameters('storageAccountEndPoint')]"
                              },
                              "publisher": "Microsoft.OSTCExtensions",
                              "settings": {
                                "xmlCfg": "[base64(concat(variables('wadcfgxstart'),variables('wadmetricsresourceid0'),variables('wadcfgxend')))]",
                                "StorageAccount": "[variables('applicationDiagnosticsStorageAccountName')]"
                              },
                              "typeHandlerVersion": "2.3"
                            }
                          }
                        ]
                      },
                      "networkProfile": {
                        "networkInterfaceConfigurations": [
                          {
                            "name": "[concat(variables('nicName'), '-0')]",
                            "properties": {
                              "ipConfigurations": [
                                {
                                  "name": "[concat(variables('nicName'),'-',0)]",
                                  "properties": {
                                    "loadBalancerBackendAddressPools": [
                                      {
                                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name')),'LoadBalancerBEAddressPool')]"
                                      }
                                    ],
                                    "loadBalancerInboundNatPools": [
                                      {
                                        "id": "[resourceId('Microsoft.Network/loadBalancers/inboundNatPools',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name')),'LoadBalancerBEAddressNatPool')]"
                                      }
                                    ],
                                    "subnet": {
                                      "id": "[variables('subnet0Ref')]"
                                    }
                                  }
                                }
                              ],
                              "primary": true
                            }
                          }
                        ]
                      },
                      "osProfile": {
                        "adminPassword": "[parameters('adminPassword')]",
                        "adminUsername": "[parameters('adminUsername')]",
                        "computernamePrefix": "[variables('vmNodeType0Name')]",
                        "secrets": [
                          {
                            "sourceVault": {
                              "id": "[parameters('sourceVaultValue')]"
                            },
                            "vaultCertificates": [
                              {
                                "certificateUrl": "[parameters('certificateUrlValue')]"
                              }
                            ]
                          }
                        ]
                      },
                      "storageProfile": {
                        "imageReference": {
                          "publisher": "[variables('vmImagePublisher')]",
                          "offer": "[variables('vmImageOffer')]",
                          "sku": "[variables('vmImageSku')]",
                          "version": "[variables('vmImageVersion')]"
                        },
                        "osDisk": {
                          "caching": "ReadOnly",
                          "createOption": "FromImage",
                          "managedDisk": {
                            "storageAccountType": "[variables('storageAccountType')]"
                          }
                        }
                      }
                    }
                  },
                  "sku": {
                    "name": "[parameters('vmNodeType0Size')]",
                    "capacity": "[parameters('nt0InstanceCount')]",
                    "tier": "Standard"
                  },
                  "tags": {
                    "resourceType": "Service Fabric",
                    "clusterName": "[parameters('clusterName')]"
                  }
                },
                {
                  "apiVersion": "2017-07-01-preview",
                  "type": "Microsoft.ServiceFabric/clusters",
                  "name": "[parameters('clusterName')]",
                  "location": "[parameters('location')]",
                  "dependsOn": [
                    "[resourceId('Microsoft.Storage/storageAccounts/', variables('supportLogStorageAccountName'))]"
                  ],
                  "properties": {
                    "addonFeatures": [
                      "DnsService",
                      "RepairManager"
                    ],
                    "certificate": {
                      "thumbprint": "[parameters('certificateThumbprint')]",
                      "x509StoreName": "[parameters('certificateStoreValue')]"
                    },
                    "clusterState": "Default",
                    "diagnosticsStorageAccountConfig": {
                      "blobEndpoint": "[reference(variables('supportLogStorageAccountName'), '2020-08-01-preview').primaryEndpoints['blob']]",
                      "protectedAccountKeyName": "StorageAccountKey1",
                      "queueEndpoint": "[reference(variables('supportLogStorageAccountName'), '2020-08-01-preview').primaryEndpoints['queue']]",
                      "storageAccountName": "[variables('supportLogStorageAccountName')]",
                      "tableEndpoint": "[reference(variables('supportLogStorageAccountName'), '2020-08-01-preview').primaryEndpoints['table']]"
                    },
                    "fabricSettings": [
                      {
                        "parameters": [
                          {
                            "name": "ClusterProtectionLevel",
                            "value": "[variables('clusterProtectionLevel')]"
                          }
                        ],
                        "name": "Security"
                      }
                    ],
                    "managementEndpoint": "[concat('https://',reference(resourceId('Microsoft.Network/publicIPAddresses',concat(variables('lbIPName'),'-',variables('vmNodeType0Name')))).dnsSettings.fqdn,':',variables('nt0fabricHttpGatewayPort'))]",
                    "nodeTypes": [
                      {
                        "name": "[variables('vmNodeType0Name')]",
                        "applicationPorts": {
                          "endPort": "[variables('nt0applicationEndPort')]",
                          "startPort": "[variables('nt0applicationStartPort')]"
                        },
                        "clientConnectionEndpointPort": "[variables('nt0fabricTcpGatewayPort')]",
                        "durabilityLevel": "Bronze",
                        "ephemeralPorts": {
                          "endPort": "[variables('nt0ephemeralEndPort')]",
                          "startPort": "[variables('nt0ephemeralStartPort')]"
                        },
                        "httpGatewayEndpointPort": "[variables('nt0fabricHttpGatewayPort')]",
                        "isPrimary": true,
                        "vmInstanceCount": "[parameters('nt0InstanceCount')]"
                      }
                    ],
                    "provisioningState": "Default",
                    "reliabilityLevel": "Silver",
                    "upgradeMode": "Automatic",
                    "vmImage": "Linux"
                  },
                  "tags": {
                    "resourceType": "Service Fabric",
                    "clusterName": "[parameters('clusterName')]"
                  }
                }
              ],
            "outputs": {
              "clusterProperties": {
                  "value": "[reference(parameters('clusterName'))]",
                  "type": "object"
                }
              }
            }
          }
      }
    ],
    "outputs": {}
  }







